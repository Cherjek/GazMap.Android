package ru.zch.gasstation.domain;

// Generated 06.03.2015 2:11:10 by Hibernate Tools 4.0.0

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * Point generated by hbm2java
 */
@Entity
@Table(name = "point", catalog = "gasstation")
public class Point implements java.io.Serializable {
	
	private static final long serialVersionUID = -5806191236697320037L;
	
	private Integer id;
	private Float lat;
	private Float lon;
	private String name;
	private String address;
	private String worktime;
	private int state;
	private Date modified;
	private Date created;
	private byte isDeleted;
	private byte isCardAccepted;
	private byte isAccepted;
	private Set<Price> prices = new HashSet<>(0);
	private Set<Vote> votes = new HashSet<>(0);
	private Set<Change> changes = new HashSet<>(0);
	
	public Point() {
	}

	public Point(int state, Date modified, Date created, byte isDeleted, byte isCardAccepted, byte isAccepted) {
		this.state = state;
		this.modified = modified;
		this.created = created;
		this.isDeleted = isDeleted;
		this.isCardAccepted = isCardAccepted;
		this.isAccepted = isAccepted;
	}

	public Point(Float lat, Float lon, String name, String address, String worktime, int state, Date modified, Date created, byte isDeleted, byte isCardAccepted, byte isAccepted, Set<Price> prices, Set<Vote> votes, Set<Change> changes) {
		this.lat = lat;
		this.lon = lon;
		this.name = name;
		this.address = address;
		this.worktime = worktime;
		this.state = state;
		this.modified = modified;
		this.created = created;
		this.isDeleted = isDeleted;
		this.isCardAccepted = isCardAccepted;
		this.isAccepted = isAccepted;
		this.prices = prices;
		this.votes = votes;
		this.changes = changes;
	}
	
	/**
	 * Retrieve rating in rage [0;5]. Rating is discrete value.
	 * <p>0 means there is no rating
	 */
	@Transient
	public float getRating(){
		//get votes balance
		float balance = 0f;
		for(Vote vote : votes){
			if(vote.getVote() > 0){
				balance++;
			}
		}
		
		//normalize to range [0; 5]
		if(votes.size() > 0){
			balance /= votes.size();
			balance *= 5;
		}

		return balance;
	}
	
	/**
	 * Retrieves total amount of vote 
	 */
	@Transient
	public int getVoteCount(){
		return votes.size();
	}
	
	/**
	 * Retrieves price for specified type
	 * @param type
	 * @return return null if there is no price with specfiied id
	 */
	@Transient
	public Float getPriceOfType(int type){
		if(prices == null){
			return null;
		}
		
		//try to find price of required type
		Iterator<Price> iterator = prices.iterator();
		while(iterator.hasNext() == true){
			Price price = iterator.next();
			if(price.getId().getTid() == type){
				return price.getPrice();
			}
		}
		
		return null;
	}
	
	
	/**
	 * Retrieves type of point
	 * @param type
	 * @return return null if there is no any type for the point
	 */
	@Transient
	public Integer getType(){
		if(prices == null){
			return null;
		}
		int type = 0;
		//sumarise all point's types 
		Iterator<Price> iterator = prices.iterator();
		while(iterator.hasNext() == true){
			Price price = iterator.next();
			if(price.getId().getTid() == type){
				type &= price.getType().getId();
			}
		}
		
		if(type == 0){
			return null;
		}
		
		return type;
	}
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "lat", precision = 12, scale = 0)
	public Float getLat() {
		return this.lat;
	}

	public void setLat(Float lat) {
		this.lat = lat;
	}

	@Column(name = "lon", precision = 12, scale = 0)
	public Float getLon() {
		return this.lon;
	}

	public void setLon(Float lon) {
		this.lon = lon;
	}

	@Column(name = "name", length = 256)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "address", length = 256)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "worktime", length = 256)
	public String getWorktime() {
		return this.worktime;
	}

	public void setWorktime(String worktime) {
		this.worktime = worktime;
	}

	@Column(name = "state", nullable = false)
	public int getState() {
		return this.state;
	}

	public void setState(int state) {
		this.state = state;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified", length = 19, insertable = false, updatable = false)
	public Date getModified() {
		return this.modified;
	}

	public void setModified(Date modified) {
		this.modified = modified;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19, insertable = false, updatable = false)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "isDeleted", nullable = false)
	public byte getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(byte isDeleted) {
		this.isDeleted = isDeleted;
	}

	@Column(name = "isCardAccepted", nullable = false)
	public byte getIsCardAccepted() {
		return this.isCardAccepted;
	}

	public void setIsCardAccepted(byte isCardAccepted) {
		this.isCardAccepted = isCardAccepted;
	}

	@Column(name = "isAccepted", nullable = false)
	public byte getIsAccepted() {
		return this.isAccepted;
	}

	public void setIsAccepted(byte isAccepted) {
		this.isAccepted = isAccepted;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "point")
	public Set<Price> getPrices() {
		return this.prices;
	}

	public void setPrices(Set<Price> price) {
		this.prices = price;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "point")
	public Set<Vote> getVotes() {
		return this.votes;
	}

	public void setVotes(Set<Vote> votes) {
		this.votes = votes;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "point")
	public Set<Change> getChanges() {
		return this.changes;
	}

	public void setChanges(Set<Change> changes) {
		this.changes = changes;
	}
}
